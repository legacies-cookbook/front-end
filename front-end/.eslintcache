[{"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\index.js":"1","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\App.js":"2","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\UpdateRecipe.js":"3","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\Registration.js":"4","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\utils\\PrivateRoute.js":"5","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\RecipeList.js":"6","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\Login.js":"7","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\data.js":"8","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\RecipeListCard.js":"9","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\reducers\\recipeReducer.js":"10","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\reducers\\userReducer.js":"11","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\constants\\recipeConstants.js":"12","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\constants\\userConstants.js":"13","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\actions\\UserActions.js":"14","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\actions\\RecipeActions.js":"15","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\utils\\axiosWithAuth.js":"16","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\AddRecipe.js":"17"},{"size":174,"mtime":1612399510751,"results":"18","hashOfConfig":"19"},{"size":1877,"mtime":1612491412092,"results":"20","hashOfConfig":"19"},{"size":2568,"mtime":1612406630373,"results":"21","hashOfConfig":"19"},{"size":4147,"mtime":1612405589463,"results":"22","hashOfConfig":"19"},{"size":434,"mtime":1611797324038,"results":"23","hashOfConfig":"19"},{"size":1492,"mtime":1612406052590,"results":"24","hashOfConfig":"19"},{"size":2964,"mtime":1612405583648,"results":"25","hashOfConfig":"19"},{"size":8337,"mtime":1612235344468,"results":"26","hashOfConfig":"19"},{"size":657,"mtime":1612406768444,"results":"27","hashOfConfig":"19"},{"size":2529,"mtime":1612398860837,"results":"28","hashOfConfig":"19"},{"size":995,"mtime":1612398860838,"results":"29","hashOfConfig":"19"},{"size":929,"mtime":1612398860836,"results":"30","hashOfConfig":"19"},{"size":362,"mtime":1612398860836,"results":"31","hashOfConfig":"19"},{"size":1438,"mtime":1612398860834,"results":"32","hashOfConfig":"19"},{"size":3354,"mtime":1612398860834,"results":"33","hashOfConfig":"19"},{"size":253,"mtime":1611797863936,"results":"34","hashOfConfig":"19"},{"size":2455,"mtime":1612492665436,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"2xzi2s",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\index.js",[],["77","78"],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\App.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\UpdateRecipe.js",["79"],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\Registration.js",["80"],"import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { register } from '../actions/UserActions';\r\n\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n \r\n    if (!values.username) {\r\n      errors.username = 'username required';\r\n    } else if (values.username.length < 6) {\r\n      errors.username = 'Username must be at least 6 characters';\r\n    }\r\n \r\n    if (!values.password) {\r\n      errors.password = 'password required';\r\n    } else if (values.password.length < 6) {\r\n      errors.password = 'Password must be at least 6 characters';\r\n    }\r\n \r\n    if (!values.email) {\r\n      errors.email = 'email required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.tos) {\r\n      errors.tos = 'You must accept the terms of service';\r\n    } else if (values.tos.boolean === false) {\r\n      errors.tos = '';\r\n    }\r\n \r\n   return errors;\r\n}\r\n \r\n  const RegistrationForm = () => {\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        tos: false,\r\n      }\r\n     ,\r\n      validate,\r\n\r\n    onSubmit: values => {\r\n      register(values);\r\n      FormReset();\r\n      \r\n      // axios\r\n      // .post('https://reqres.in/api/users', values)\r\n      // .then(res => {\r\n      //   (JSON.stringify(res.data, null, 8))\r\n      //   console.log('success', res)\r\n      //   FormReset();\r\n      // })\r\n      // .catch(err => {\r\n      //   console.log('failed request', err)\r\n      // })\r\n     }} \r\n    )\r\n\r\n    const FormReset = () => {\r\n      Array.from(document.querySelectorAll(\"input\")).forEach(\r\n        input => (input.value = \"\")\r\n      )\r\n      \r\n    }\r\n\r\n   \r\n    return (\r\n      <div className= 'registration-container'>\r\n      <h1>Register Now</h1>\r\n      \r\n      {formik.errors.username ? <div style={{color:'red'}}>{formik.errors.username}</div> : null}\r\n      {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n      {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n      {formik.errors.tos ? <div style={{color: 'red'}}>{formik.errors.tos}</div> : null}\r\n      \r\n     \r\n      <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor='username'>Username:</label>\r\n      <input\r\n        id='username'\r\n        placeholder='create username'\r\n        name='username'\r\n        type='text'\r\n        style={{width: '300px', marginBottom: '10px', padding: '12px'}}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.username}\r\n      />\r\n       \r\n \r\n      <label htmlFor='password'>Password:</label>\r\n      <input\r\n        id='password'\r\n        placeholder='create password'\r\n        name='password'\r\n        type='password'\r\n        style={{width: '300px', marginBottom: '10px', padding: '12px'}}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.password}\r\n      />\r\n       \r\n \r\n      <label htmlFor='email'>Email:</label>\r\n      <input\r\n        id='email'\r\n        placeholder='enter email address'\r\n        name='email'\r\n        type='email'\r\n        style={{width: '300px', marginBottom: '10px', padding: '12px'}}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.email}\r\n      />\r\n      \r\n      <div className='tos'>\r\n      <label htmlFor='tos'>I accept the terms of service</label>\r\n      <input\r\n        id='tos'\r\n        name='tos'\r\n        type='checkbox'\r\n        onChange={formik.handleChange}\r\n        value={formik.values.tos} \r\n      />\r\n  </div>\r\n       \r\n      <button className='login-button' type='submit'>Submit</button>\r\n       \r\n      <Link to='/login' style={{textDecoration:'none'}}> \r\n      \r\n      <button className='login-button' type='button'>Login</button>\r\n    \r\n      </Link>\r\n\r\n      <p style={{fontStyle:'italic', fontWeight:'bold'}}>Already have an account?</p>\r\n     \r\n    </form>\r\n  </div>\r\n     \r\n  );\r\n };\r\n\r\n\r\n export default connect({register})(RegistrationForm);","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\RecipeList.js",["81","82"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { recipeDetails } from '../actions/RecipeActions';\r\n// import data from \"./data\";\r\nimport RecipeListCard from \"./RecipeListCard\";\r\nimport HeroImage from \"../images/HeroImage.png\";\r\n\r\nfunction RecipeList() {\r\n\r\n    // const mockApiCall = data;\r\n\r\n    const findRecipe = () => {\r\n        console.log(\"clicked\");\r\n        recipeDetails(); //is this meant to be here?\r\n    }\r\n\r\n    return (\r\n        <div className=\"recipeList\">\r\n            <img className=\"hero\" src={HeroImage} alt=\"Hero Image\"/>\r\n            <div className=\"recipeList__body\">\r\n            <div className=\"recipeList__search\">\r\n                <h3>Search For A Recipe</h3>\r\n                <form onSubmit={findRecipe}>\r\n                    <input type=\"text\" placeholder=\"placeholder text\"/>\r\n                    <button type=\"submit\">test</button>\r\n                </form>\r\n                <h3>Filter recipes by type</h3>\r\n                \r\n            </div>\r\n            <div className=\"recipeList__content\">\r\n                {props.recipes.map(recipe => {\r\n                    return <RecipeListCard key={recipe.id} title={recipe.title} source={recipe.source} photo={recipe.photo} type={recipe.type} />\r\n                })}\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        recipes: state.recipes\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(RecipeList);\r\n","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\Login.js",["83"],"import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'; \r\nimport { connect } from 'react-redux';\r\nimport { login } from '../actions/UserActions';\r\n\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n \r\n    if (!values.username) {\r\n    errors.username = 'username required';\r\n    } else if (values.username.length < 6) {\r\n    errors.username = 'Username must be at least 6 characters';\r\n    }\r\n \r\n    if (!values.password) {\r\n      errors.password = 'password required';\r\n    } else if (values.password.length < 6) {\r\n      errors.password = 'Password must be at least 6 characters';\r\n    }\r\n \r\n   return errors;\r\n };\r\n \r\nconst LoginForm = () => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: '',\r\n      password: '',\r\n     }\r\n     ,\r\n      validate,\r\n      \r\n      onSubmit: values => {\r\n        login(values);\r\n        FormReset();\r\n      // axios\r\n      // .post('https://reqres.in/api/users', values)\r\n      // .then(res => {\r\n      //     (JSON.stringify(res.data, null, 8))\r\n      //     console.log('success', res)\r\n      //     FormReset()\r\n          \r\n          \r\n      // })\r\n      // .catch(err => {\r\n      //   console.log('failed request', err)\r\n      // })\r\n     }}\r\n     )\r\n\r\n     const FormReset = () => {\r\n      Array.from(document.querySelectorAll(\"input\")).forEach(\r\n        input => (input.value = \"\"))\r\n      \r\n    }\r\n\r\n   \r\n    return (\r\n      <div className= 'login-container'>\r\n      <h1>Sign In</h1>\r\n      \r\n      {formik.errors.username ? <div style={{color: 'red'}}>{formik.errors.username}</div> : null}\r\n      {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n      \r\n      <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor='username'>Username:</label>\r\n      <input\r\n        id='username'\r\n        placeholder='enter username'\r\n        name='username'\r\n        type='text'\r\n        style={{width: '300px', marginBottom: '10px', padding: '12px'}}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.username}\r\n      />\r\n \r\n      <label htmlFor='password'>Password:</label>\r\n      <input\r\n        id='password'\r\n        placeholder='enter password'\r\n        name='password'\r\n        type='password'\r\n        style={{width: '300px', marginBottom: '50px', padding: '12px'}}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.password}\r\n      />\r\n       \r\n       \r\n\r\n      <button className='login-button' type='submit'>Log In</button>\r\n\r\n      <Link to='/register' style={{textDecoration:'none'}}>\r\n        \r\n      <button className='login-button' type='button'>Register</button>\r\n      \r\n      </Link>\r\n\r\n      <p style={{fontStyle:'italic', fontWeight:'bold'}}>Need to register?</p>\r\n\r\n    </form>\r\n  </div>\r\n  );\r\n };\r\n\r\n\r\n export default connect({login})(LoginForm);","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\data.js",[],["84","85"],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\RecipeListCard.js",["86"],"import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { recipeDetails } from '../actions/RecipeActions'\r\n\r\nfunction RecipeListCard({title, source, photo, type}) {\r\n    \r\n    return (\r\n        <div className=\"RecipeListCard\">\r\n            <img src={photo} alt=\"Recipe Photo\" />\r\n            <div className=\"RecipeListCard__details\">\r\n                <h3>{source}</h3>\r\n                <p>{type}</p>\r\n            </div>\r\n            <h2>{title}</h2>\r\n            <button className=\"recipe_details\" onClick={() => recipeDetails()}>View Recipe</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect({ recipeDetails })(RecipeListCard)\r\n","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\reducers\\recipeReducer.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\reducers\\userReducer.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\constants\\recipeConstants.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\constants\\userConstants.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\actions\\UserActions.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\actions\\RecipeActions.js",["87","88","89"],"import axiosWithAuth from \"../utils/axiosWithAuth\";\r\nimport * as actions from \"../constants/recipeConstants\";\r\n\r\n// gets a list of all recipes\r\nexport const listRecipes = () => async (dispatch) => {\r\n    dispatch({type: actions.FETCH_RECIPES_REQUEST});\r\n    try {\r\n        const {data} = await axiosWithAuth.get(\"/recipes\");\r\n        dispatch({type: actions.FETCH_RECIPES_SUCCESS, payload: data});\r\n    } catch(error) {\r\n        dispatch({type: actions.FETCH_RECIPES_FAILURE,\r\n        payload:\r\n            error.resposne && error.response.message\r\n            ? error.response.message\r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\n// Gets a specific recipe by id\r\nexport const recipeDetails = (id) = async (dispatch) => {\r\n    dispatch({type: actions.FETCH_RECIPE_REQUEST});\r\n    try {\r\n        const {data} = await axiosWithAuth.get(`/recipes/${id}`) // change to `/recipes/:${id}` if unsuccessful\r\n        dispatch({type: actions.FETCH_RECIPE_SUCCESS, payload: data});\r\n    } catch(error) {\r\n        dispatch({type: actions.FETCH_RECIPE_FAILURE,\r\n            payload:\r\n                error.resposne && error.response.message\r\n                ? error.response.message\r\n                : error.message\r\n            }) \r\n    }\r\n}\r\n\r\n// Adds a new recipe \r\nexport const addNewRecipe = (id, user_id, title, source, type, photo, ingredients, instructions) => async (dispatch) => {\r\n    dispatch({type: actions.ADD_RECIPE_REQUEST});\r\n    try {\r\n        const {data} = await axiosWithAuth.post(\"/recipes\", {\r\n            id,\r\n            user_id,\r\n            title,\r\n            source,\r\n            type,\r\n            photo,\r\n            ingredients,\r\n            instructions\r\n        });\r\n        dispatch({type: actions.ADD_RECIPE_SUCCESS, payload: data});\r\n    } catch(error) {\r\n        dispatch({type: actions.ADD_RECIPE_FAILURE,\r\n            payload:\r\n                error.resposne && error.response.message\r\n                ? error.response.message\r\n                : error.message\r\n            }) \r\n    }\r\n}\r\n\r\n// Updates an existing recipe\r\nexport const updateRecipe = (id, title, source, ingredients, instructions) => async (dispatch) => {\r\n    dispatch({type: actions.UPDATE_RECIPE_REQUEST});\r\n    try {\r\n        const {data} = await axiosWithAuth.put(`/recipes/${id}`, { // change to `/recipes/:${id}` if unsuccessful\r\n            id,\r\n            user_id,\r\n            title,\r\n            source,\r\n            ingredients,\r\n            instructions\r\n        });\r\n        dispatch({type: actions.UPDATE_RECIPE_SUCCESS, payload: data});\r\n    } catch(error) {\r\n        dispatch({type: actions.ADD_RECIPE_FAILURE,\r\n            payload:\r\n                error.resposne && error.response.message\r\n                ? error.response.message\r\n                : error.message\r\n            }) \r\n    }\r\n}\r\n\r\n// Deletes a recipe\r\nexport const deleteRecipe = (id) => async (dispatch) => {\r\n    dispatch({type: actions.DELETE_RECIPE_REQUEST});\r\n    try {\r\n        const {data} = axiosWithAuth.delete(`/recipes/${id}`);\r\n        dispatch({type: actions.DELETE_RECIPE_SUCCESS, payload: data});\r\n    } catch(error) {\r\n        dispatch({type: actions.DELETE_RECIPE_FAILURE,\r\n            payload:\r\n                error.resposne && error.response.message\r\n                ? error.response.message\r\n                : error.message\r\n            })\r\n    }\r\n}","C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\bmmar\\Lambda Projects\\3 - Web Applications II\\Build Week\\front-end\\front-end\\src\\components\\AddRecipe.js",["90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":13},{"ruleId":"99","severity":1,"message":"100","line":19,"column":13,"nodeType":"101","endLine":19,"endColumn":69},{"ruleId":"102","severity":2,"message":"103","line":31,"column":18,"nodeType":"97","messageId":"104","endLine":31,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":13},{"ruleId":"91","replacedBy":"105"},{"ruleId":"93","replacedBy":"106"},{"ruleId":"99","severity":1,"message":"100","line":9,"column":13,"nodeType":"101","endLine":9,"endColumn":51},{"ruleId":"102","severity":2,"message":"107","line":21,"column":31,"nodeType":"97","messageId":"104","endLine":21,"endColumn":33},{"ruleId":"102","severity":2,"message":"107","line":24,"column":60,"nodeType":"97","messageId":"104","endLine":24,"endColumn":62},{"ruleId":"102","severity":2,"message":"108","line":67,"column":13,"nodeType":"97","messageId":"104","endLine":67,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-undef","'props' is not defined.","undef",["109"],["110"],"'id' is not defined.","'user_id' is not defined.","no-global-assign","no-unsafe-negation"]